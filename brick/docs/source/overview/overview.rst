Overview
=====

1990년대 VMware같은 하이퍼 바이저 기반의 가상화 기술의 등장이 IT Infra 지형을 크게 바꾸어 놓은 것처럼
컨테이너(Container)라고 하는 OS 레벨의 프로세스 가상화 기술은
최근 IT Infra의 지형을 크게 바꾸어 가고 있습니다.

컨테이너 기술은 기술적인 난이도와 복잡함 때문에 아직까지는 사용이 어려운 부분이 있음에도,
기술이 가진 다양한 장점 때문에, 
최근에는 레가시 어플리케이션 뿐 만 아니라 인공지능(머신러닝) 개발을 위한 플랫폼에 많이 사용되고 있습니다.

컨테이너 기술은 프로세스(그룹)를 격리 기술을 사용하여, 사용자 환경 및 자원을 완전히 격리하여
완전히 독립적인 환경으로 동작하도록 지원합니다.
머신러닝 개발 등 하나의 노드에서 다중 어플리케이션 환경을 배포하고 운영해야 하는 경우에
적합한 기술이라고 할 수 있습니다. 
만일 하나의 노드에서 그 모든 환경을 구현하고 운영한다면, 
프로그램 간 라이브러리 호환성 문제와 자원 분배 등 여러 문제에 봉착할 것입니다.

또한 기존 하이퍼바이저 기반의 가상화 기술에 비해, 오버헤드로 인한 손실 없이
물리 서버의 성능과 속도를 100% 가까이 활용할 수 있습니다.
(하이퍼바이저와 H/W 자원의 추상화 없이 컨테이너 런타임을 통해 처리)

.. figure:: /_static/images/overview/container-description1.png
   :width: 60%
   :align: center
   :alt: 컨테이너 격리환경

|
Container Features
----------------

* **빠른 어플리케이션 배포**
    공식 컨테이너 이미지 또는 직접 빌드한 이미지들을 통해
    어플리케이션을 단 몇 분 만에 배포하거나 바로 회수 할 수 있습니다.
* **어플리케이션의 이식성**
    개발-운영 환경 간 마이그레이션처럼 훌륭한 이식성을 제공하여,
    개발 단계에서 사용하던 환경을 그대로 운영 환경에 사용이 가능합니다.
* **버전 제어, 컴포넌트 재사용**
    유사한 환경을 단일 컨테이너 이미지를 통해 지속적으로 배포가 가능하여, S/W 스택 구성에 소요되는 시간을 절약할 수 있습니다.
    다양한 환경(프레임워크/라이브러리 버전)을 노드에 영향없이 테스트 할 수 있습니다.
* **유지관리의 용이성**
    기존에 사용하던 어플리케이션 버전으로 바로 롤백이 가능하며, 
    온프레미스, 클라우드 등 환경에 제약받지 않고 무수정 배포가 가능합니다.

|
Container Features
----------------
컨테이너 기반 환경에서 컨테이너를 보다 효과적으로 사용하고 관리하기 위해서는,
증가하는 컨테이너의 효율적인 운영 및 관리, 컴퓨팅 자원의 효과적인 사용 등에 대한 솔루션이 필요합니다.
_Brick은 Kubernetes 기반에서 컨테이너를 배포/운영/관리할 수 있는 통합 관리 솔루션으로,
컨테이너를 보다 편리하게 사용하고 관리할 수 있는 플랫폼을 제공합니다.

.. _Brick: http://brickcloud.co.kr/

.. figure:: /_static/images/overview/brick1.png
   :width: 70%
   :align: center
   :alt: BRICK
   
